---
  - name: Initial Setup of Hypervisors
    hosts: all
    become: yes
    vars:
      username: cnovak
    remote_user: "{{ username }}"

    tasks:

      - name: Allow the backup user to sudo /usr/local/bin/backup
        community.general.sudoers:
          name: allow-sudo
          state: present
          user: "{{ username }}"
          commands: ALL
          nopassword: true

      ## Virtualization and sushy packages setup
      - name: Ensure the "Virtualization" Group is installed.
        yum:
          name: "@Virtualization,podman,bind-utils,libguestfs-tools,cloud-init,virt-install,lm_sensors, python3-jmespath, cockpit, cockpit-machines,openssh-askpass"
          state: installed

      - name: Append libvirt to cnovak user
        user:
          name: "{{ username }}"
          groups:
            - wheel
            - libvirt

      - name: Make sure share dir is created
        file:
          path: /mnt/share
          state: directory
      ## Sushy pre-reqs (creating dir, generating htpaswd & key/cert + sushy config
      - name: Make sure sushy dir is created
        file:
          path: /etc/sushy
          state: directory
      - name: Creation of htpaswd file
        copy:
          dest: "/etc/sushy/auth"
          content: |
            test:$2y$10$ql7DIlo4j8JJOb0rtwgPYORTR/BAdMAwIl7SbXefZ398GeARe2atC
      - name: Create private key (X25519) with password protection
        community.crypto.openssl_privatekey:
          path: /etc/sushy/sushy.key
      - name: Create simple self-signed certificate
        community.crypto.x509_certificate:
          path: /etc/sushy/sushy.cert
          privatekey_path: /etc/sushy/sushy.key
          provider: selfsigned
      - name: Creation of sushy-config
        copy:
          dest: "/etc/sushy/sushy-emulator.conf"
          content: |
            SUSHY_EMULATOR_LISTEN_IP = u'0.0.0.0'
            SUSHY_EMULATOR_LISTEN_PORT = 8000
            SUSHY_EMULATOR_SSL_CERT = '/etc/sushy/sushy.cert'
            SUSHY_EMULATOR_SSL_KEY = '/etc/sushy/sushy.key'
            SUSHY_EMULATOR_AUTH_FILE = '/etc/sushy/auth'
            SUSHY_EMULATOR_OS_CLOUD = None
            SUSHY_EMULATOR_LIBVIRT_URI = u'qemu:///system'
            SUSHY_EMULATOR_IGNORE_BOOT_DEVICE = True
            SUSHY_EMULATOR_BOOT_LOADER_MAP = {
            u'UEFI': {
                u'x86_64': u'/usr/share/OVMF/OVMF_CODE.secboot.fd'
            },
            u'Legacy': {
              u'x86_64': None
              }
            }

      ## Create the sushy container and generate a systemd service to go along with it
      - name: Generate systemd file for sushy-emulator
        containers.podman.podman_container:
          name: sushy-emulator
          privileged: true
          image: quay.io/metal3-io/sushy-tools
          state: present
          ports: "8000:8000"
          command: "sushy-emulator -i :: -p 8000 --config /etc/sushy/sushy-emulator.conf"
          volume: 
            - "/etc/sushy:/etc/sushy"
            - "/var/run/libvirt:/var/run/libvirt"
          generate_systemd:
            path: /etc/systemd/system/
            names: true
            time: 1

      ## Reload systemd and ensure firewalld, libvirt andsushy is started
      - name: Ensure systemd reloads
        ansible.builtin.systemd:
          daemon_reload: true
      - name: Start and enable libvirtd and sushy-tools
        ansible.builtin.service:
          name: "{{ item }}"
          state: started
          enabled: yes
        loop:
          - libvirtd
          - container-sushy-emulator
          - firewalld
          - cockpit

      ## Make sure sushy is started, and the firewall rule is valid
      # - name: Check that sushy is accessible and appears to be working correctly
      #   ansible.builtin.uri:
      #     url: https://localhost:8000/redfish/v1/Managers
      #     return_content: yes
      #   register: result
      #   failed_when: "'Managers' not in result.content"
      - name: Ensure firewalld is configured for external redfish access over port 8000
        firewalld:
          port: 8000/tcp
          immediate: true
          permanent: true
          state: enabled
